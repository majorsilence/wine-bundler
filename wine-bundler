#!/usr/bin/env bash

APP_SCRIPT=`basename "$0"`
APP_VERSION="1.3"
APP_CACHE="$HOME/.cache/wine-bundler"

ARG_NAME="My Wine App"
ARG_ICON="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericApplicationIcon.icns"
ARG_PREFIX="$HOME/.wine"
ARG_APP=""
ARG_APP_PROMPT="Select application"
ARG_APP_MENU=""
ARG_WINE="^stable-"
ARG_LOCALE="en_US.UTF-8"
ARG_ARCH="win32"

NAME_WINE_HOME="wine-home"
NAME_WINE_PREFIX="wine-prefix"
NAME_LAUNCHER="launcher.scpt"

set -o pipefail

usage () {
  cat <<EOF

${APP_SCRIPT} v${APP_VERSION} for macOS

Usage:

  ${APP_SCRIPT} [options]

Options:

  -h (help)     Prints this help message, then exits
  -v (version)  Prints the version of this script, then exits
  -l (list)     Prints all available portable wine versions
  -s (app)      Set wine start application (defaults to "${ARG_APP}")
  -m (menu)     Set wine start menu
                Format: "Game=c:\my game\game.exe|Config=c:\my game\config.exe"
                First entry will be default
  -r (prompt)   Set wine start menu prompt
                (defaults to "${ARG_APP_PROMPT}")
  -n (name)     Name of the app bundle (defaults to "${ARG_NAME}")
  -i (icon)     Name of the icon file to use when creating the app bundle
                (defaults to ${ARG_ICON})
  -p (prefix)   Wine prefix to use for application bundle
                (defaults to ${ARG_PREFIX})
  -w (wine)     Use specific wine version (regular expression)
                (defaults to latest stable win64 or win32)
                Latest win32: -osx$
                Latest win64: -osx64$
                Latest stable win32: ^stable-.*-osx$
                Latest stable win64: ^stable-.*-osx64$
                Specific version: '^stable-3\.0-osx$'
  -c (locale)   Set specific locale for wine (LC_ALL)
                (defaults to ${ARG_LOCALE})
  -a (arch)     Set specific architecture for wine (win32 or win64)
                (defaults to ${ARG_ARCH})

Description:

  Creates macOS application bundle from wine prefix.

  Note that you cannot alter bundle later but you could manually edit it.

Copyright:

  Copyright (c) Artem Butusov <https://www.artembutusov.com>

EOF
}

version () {
  echo "v${APP_VERSION}"
}

error () {
  echo "ERROR: $1" >&2
  exit 1
}

wine_list () {
  local url="https://api.github.com/repos/Gcenx/macOS_Wine_builds/releases"
  curl -s "$url" \
    | jq -r '.[].assets[].name' \
    | grep '^wine-.*\.tar\.xz$' \
    | sed -e 's/^wine-\(.*\)\.tar\.xz$/\1/' \
    || error "Unable to download list of wine versions"
}

wine_fetch () {
  local version="$1"
  local url="https://api.github.com/repos/Gcenx/macOS_Wine_builds/releases"
  local dl_url=$(curl -s "$url" |
    jq -r '.[].assets[] | select(.name == "wine-'"$version"'.tar.xz") | .browser_download_url')
  if [ ! -e "$APP_CACHE" ]; then
    mkdir -p "$APP_CACHE" || error "Unable to create cache directory"
  fi
  echo "Downloading wine..."
  cd "$APP_CACHE" && curl --progress-bar -L -O -C - "$dl_url" && cd - > /dev/null \
    || error "Unable to download wine"
}

wine_install () {
  local target="$1"
  local version="$2"
  local cache="$APP_CACHE/wine-${version}.tar.xz"
  [ ! -e "$cache" ] && wine_fetch "$version"
  mkdir -vp "$target" || error "Unable to create directory"
  echo "Extracting wine..."
  tar -xf "$cache" -C "$target" || error "Unable to extract wine"
  mv "$target"/Wine*.app/Contents/Resources/wine "$target"/usr
  rm -rf "$target"/Wine*.app
  echo "$version" > "$target/version"
}

png2icns () {
  local source="$1"
  local target="$2"

  local iconset="${target%.icns}.iconset"

  mkdir "${iconset}"

  sips -z 16 16     "${source}" --out "${iconset}/icon_16x16.png" > /dev/null
  sips -z 32 32     "${source}" --out "${iconset}/icon_16x16@2x.png" > /dev/null
  sips -z 32 32     "${source}" --out "${iconset}/icon_32x32.png" > /dev/null
  sips -z 64 64     "${source}" --out "${iconset}/icon_32x32@2x.png" > /dev/null
  sips -z 128 128   "${source}" --out "${iconset}/icon_128x128.png" > /dev/null
  sips -z 256 256   "${source}" --out "${iconset}/icon_128x128@2x.png" > /dev/null
  sips -z 256 256   "${source}" --out "${iconset}/icon_256x256.png" > /dev/null
  sips -z 512 512   "${source}" --out "${iconset}/icon_256x256@2x.png" > /dev/null
  sips -z 512 512   "${source}" --out "${iconset}/icon_512x512.png" > /dev/null
  sips -z 1024 1024 "${source}" --out "${iconset}/icon_512x512@2x.png" > /dev/null

  iconutil -c icns "$iconset"

  rm -rf "$iconset"
}

ico2any () {
  local source="$1"
  local target="$2"
  local frame_number=`identify "$source" | nl | grep PNG | sed -e 's/^ *\([0-9]*\).*$/\1/' | tail -n 1`
  if [ -z "$frame_number" ]; then
    frame_number=1
  fi
  frame_index=`echo $frame_number - 1 | bc`
  convert "$source[$frame_index]" "$target" \
    || error "Unable to convert image file"
}

any2icns () {
  local source="$1"
  local target="$2"
  if [ ${source: -5} == ".icns" ]; then
    cp -f "$source" "$target"
  elif [ ${source: -4} == ".png" ]; then
    png2icns "$source" "$target"
  elif [ ${source: -4} == ".ico" ]; then
    local temp_png="${target%.icns}.png"
    ico2any "$source" "$temp_png"
    png2icns "$temp_png" "$target"
    rm -f "$temp_png"
  else
    error "Icon has unsupported file extension (.icns, .png, .ico are supported)"
  fi
}

bundle_check () {
  [ -z "$BUNDLE_NAME" ] && error "Bundle name can not be empty"
  [ -z "$BUNDLE_ARCH" ] && error "Bundle arch can not be empty"
  [ -z "$BUNDLE_LOCALE" ] && error "Bundle locale can not be empty"
  [ -z "$BUNDLE_WINE" ] && error "Unable to find available wine build"
  [ -e "$BUNDLE_DIR" ] && error "Bundle directory already exists"
  [ ! -e "$BUNDLE_PREFIX" ] && error "Unable to find wine prefix"
}

bundle_create_dir () {
  mkdir -p "$BUNDLE_DIR/Contents/"{MacOS,Resources}
}

bundle_create_plist () {
  cat <<EOF > "$BUNDLE_DIR/Contents/Info.plist"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>CFBundleExecutable</key>
    <string>${BUNDLE_NAME}</string>
    <key>CFBundleGetInfoString</key>
    <string>${BUNDLE_NAME}</string>
    <key>CFBundleIconFile</key>
    <string>${BUNDLE_NAME}</string>
    <key>CFBundleName</key>
    <string>${BUNDLE_NAME}</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleSignature</key>
    <string>4242</string>
    <key>NSHighResolutionCapable</key>
    <true/>
  </dict>
</plist>
EOF
}

bundle_install_wine () {
  wine_install "$BUNDLE_DIR/Contents/Resources/$NAME_WINE_HOME" "$BUNDLE_WINE"
}

bundle_install_prefix () {
  local target="$BUNDLE_DIR/Contents/Resources/$NAME_WINE_PREFIX"
  rsync -a "$BUNDLE_PREFIX/" "$target" --exclude "dosdevices" \
    || error "Unable to copy prefix"
}

bundle_install_icon () {
  any2icns "$BUNDLE_ICON" "$BUNDLE_DIR/Contents/Resources/$BUNDLE_NAME.icns"
}

bundle_install_script () {
  local script="$BUNDLE_DIR/Contents/MacOS/$BUNDLE_NAME"
  cat <<EOF > "$script"
#!/bin/sh

ROOT="\$(cd "\$(dirname "\$0")" && pwd)"

RESOURCES="\$ROOT/../Resources"

export WINEPREFIX="\$RESOURCES/${NAME_WINE_PREFIX}"
export WINEARCH="${BUNDLE_ARCH}"
export LC_ALL="${BUNDLE_LOCALE}"

APP='${BUNDLE_APP}'
LAUNCHER="\$RESOURCES/${NAME_LAUNCHER}"
WINE="\$RESOURCES/${NAME_WINE_HOME}/usr/bin/wine"

if [ -f "\$LAUNCHER" ]; then
  APP="\$(osascript "\$LAUNCHER")"
fi

# doesn't work for some applications
#if [ -n "\$APP" ]; then
#  "\$WINE" start "\$APP"
#fi

if [ -n "\$APP" ]; then
  if [ "\${APP/\\\\}" = "\$APP" ]; then
    "\$WINE" "\$APP"
  else
    WINEPATH="\$RESOURCES/${NAME_WINE_HOME}/usr/bin/winepath"
    APP="\$("\$WINEPATH" "\$APP")"
    cd "\$(dirname "\$APP")"
    "\$WINE" "\$(basename "\$APP")"
  fi
fi
EOF
  chmod +x "$script"
}

bundle_launcher () {
  local names=`echo "$BUNDLE_APP_MENU" | tr '|' '\n' \
    | sed -e '/^\s*$/d' -e 's/=.*$//' -e 's/\(.*\)/"\1"/' -e 's!\\\\!\\\\\\\\!g' \
    | paste -sd ',' -`
  local values=`echo "$BUNDLE_APP_MENU" | tr '|' '\n' \
    | sed -e '/^\s*$/d' -e 's/^.*=//' -e 's/\(.*\)/"\1"/' -e 's!\\\\!\\\\\\\\!g' \
    | paste -sd ',' -`

  cat <<EOF > "$BUNDLE_DIR/Contents/Resources/$NAME_LAUNCHER"
on getPositionOfItemInList(theItem, theList)
  repeat with a from 1 to count of theList
      if item a of theList is theItem then return a
  end repeat
  return 0
end getPositionOfItemInList

set title to "${BUNDLE_APP_PROMPT}"
set names to {${names}}
set values to {${values}}

set defaultName to item 1 of names
set selectedName to choose from list names with prompt title default items defaultName

set selectedValue to ""
if selectedName is not false then
  set selectedValue to item (getPositionOfItemInList((selectedName as string), names)) of values
end if

selectedValue
EOF
}

bundle_touch () {
  touch "$BUNDLE_DIR"
}

bundle_build () {
  echo "Creating bundle..."
  bundle_create_dir
  echo "Installing plist..."
  bundle_create_plist
  echo "Installing script..."
  bundle_install_script
  if [ -n "$BUNDLE_APP_MENU" ]; then
    echo "Installing launcher..."
    bundle_launcher
  fi
  echo "Installing icon..."
  bundle_install_icon
  echo "Installing wine..."
  bundle_install_wine
  echo "Installing prefix..."
  bundle_install_prefix
  echo "Touching bundle..."
  bundle_touch
  echo "DONE!"
}

while getopts ":hvls:m:r:n:i:p:w:c:a:" opt; do
  case $opt in
    h)  usage; exit 0 ;;
    v)  version; exit 0 ;;
    l)  wine_list; exit 0 ;;
    s)  ARG_APP="$OPTARG" ;;
    m)  ARG_APP_MENU="$ARG_APP_MENU|$OPTARG" ;;
    r)  ARG_APP_PROMPT="$OPTARG" ;;
    n)  ARG_NAME="$OPTARG" ;;
    i)  ARG_ICON="$OPTARG" ;;
    p)  ARG_PREFIX="$OPTARG" ;;
    w)  ARG_WINE="$OPTARG" ;;
    c)  ARG_LOCALE="$OPTARG" ;;
    a)  ARG_ARCH="$OPTARG" ;;
    \?) error "Option -$OPTARG requires an argument." ;;
  esac
done

BUNDLE_NAME="$ARG_NAME"
BUNDLE_DIR="$BUNDLE_NAME.app"
BUNDLE_ICON="$ARG_ICON"
BUNDLE_PREFIX="$ARG_PREFIX"
BUNDLE_APP="$ARG_APP"
BUNDLE_APP_MENU="$ARG_APP_MENU"
BUNDLE_APP_PROMPT="$ARG_APP_PROMPT"
BUNDLE_ARCH="$ARG_ARCH"
BUNDLE_LOCALE="$ARG_LOCALE"
# Use cache first
BUNDLE_WINE=$(ls "$APP_CACHE" \
  | grep '^wine-.*\.tar\.xz$' \
  | sed -e 's/^wine-\(.*\)\.tar\.xz$/\1/' \
  | tail -n 1)
if [ -z "$BUNDLE_WINE" ]; then
  BUNDLE_WINE=`wine_list | grep "$ARG_WINE" | head -n 1`
fi

cat <<EOF

name:   $BUNDLE_NAME
bundle: $BUNDLE_DIR
app:    $BUNDLE_APP
wine:   $BUNDLE_WINE
icon:   $BUNDLE_ICON
prefix: $BUNDLE_PREFIX
arch:   $BUNDLE_ARCH
locale: $BUNDLE_LOCALE

EOF

bundle_check
bundle_build
